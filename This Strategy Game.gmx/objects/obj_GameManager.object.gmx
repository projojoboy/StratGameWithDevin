<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gamemanager</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise


window_set_fullscreen(true);


menu_state = "titlescreen";
menu_isdrawn = false;
button = "start";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Hotkey Functions


//Exit the game
if (keyboard_check_pressed(vk_escape))
{
   if window_get_fullscreen()
   {
      window_set_fullscreen(false);
   }
   else
   {
      window_set_fullscreen(true);
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing the menus


if(menu_state == "titlescreen" &amp;&amp; menu_isdrawn == false)
{
   instance_create(room_width/2, room_height/2, 
   obj_background_titlescreen);

   instance_create(room_width/2, room_height/8, 
   obj_text_gametitle);
   
   instance_create(room_width/2, room_height/8*5, 
   obj_buttons_pressStart);   
   
   button = "start";
   menu_isdrawn = true;
}

if(menu_state == "mainmenu" &amp;&amp; menu_isdrawn == false)
{
   instance_create(room_width/2, room_height/2, 
   obj_background_mainmenu);

   instance_create(room_width/2, room_height/8*3, 
   obj_buttons_startGame);
   
   instance_create(room_width/2, room_height/8*6, 
   obj_buttons_exit);   
   
   button = "startgame";
   menu_isdrawn = true;
}

if(menu_state == "gamemodes" &amp;&amp; menu_isdrawn == false)
{
   instance_create(room_width/2, room_height/2, 
   obj_background_gamemodes);

   instance_create(room_width/2, room_height/8*3, 
   obj_buttons_testLevel);
   
   instance_create(room_width/2, room_height/8*6, 
   obj_buttons_back);   
   
   button = "testlevel";
   menu_isdrawn = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Using the buttons


if(menu_state == "titlescreen")
{
   if(button == "start")
   {
      if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left))
      {
         room_goto(rm_mainmenu);
         menu_state = "mainmenu";
         menu_isdrawn = false;
      }
   } 
}


if(menu_state == "mainmenu")
{

   if(button == "startgame")
   {

      if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left))
      {
         room_goto(rm_gamemodes);
         menu_state = "gamemodes";
         menu_isdrawn = false;
      }

         if(keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_up) || position_meeting(mouse_x, mouse_y, obj_buttons_exit))
         {
            button = "exit";
         }
         if(keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down) || position_meeting(mouse_x, mouse_y, obj_buttons_exit))
         {
            button = "exit";
         }
    }
    
    if(button == "exit")
    {

      if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left))
      {
         game_end();
      }

         if(keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_up) || position_meeting(mouse_x, mouse_y, obj_buttons_startGame))
         {
            button = "startgame";
         }
         if(keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down) || position_meeting(mouse_x, mouse_y, obj_buttons_startGame))
         {
            button = "startgame";
         }
    }
}


if(menu_state == "gamemodes")
{

   if(button == "testlevel")
   {

      if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left))
      {
         room_goto(rm_testlevel);
         menu_state = "none";
         menu_isdrawn = false;
      }

         if(keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_up) || position_meeting(mouse_x, mouse_y, obj_buttons_back))
         {
            button = "back";
         }
         if(keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down) || position_meeting(mouse_x, mouse_y, obj_buttons_back))
         {
            button = "back";
         }
    }
    
    if(button == "back")
    {

      if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left))
      {
         room_goto(rm_mainmenu);
         menu_state = "mainmenu";
         menu_isdrawn = false;
      }

         if(keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_up) || position_meeting(mouse_x, mouse_y, obj_buttons_testLevel))
         {
            button = "testlevel";
         }
         if(keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down) || position_meeting(mouse_x, mouse_y, obj_buttons_testLevel))
         {
            button = "testlevel";
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
